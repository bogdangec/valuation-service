package co.quest.xms.valuation.application.repository;

import co.quest.xms.valuation.domain.model.ApiKey;

import java.util.List;
import java.util.Optional;

/**
 * Port interface for accessing and managing API keys in the persistence layer.
 * This interface defines the contract for storage and retrieval operations related to API keys.
 * Implementations of this interface are responsible for interacting with the database or other storage mechanisms.
 */
public interface ApiKeyRepository {

    /**
     * Retrieves an API key by its unique key value.
     *
     * @param key The unique key value of the API key.
     * @return An {@link Optional} containing the {@link ApiKey} if found, or an empty {@link Optional} if not.
     */
    Optional<ApiKey> findByKey(String key);

    /**
     * Saves or updates an API key in the repository.
     * This operation can be used to insert a new API key or update an existing one.
     *
     * @param apiKey The {@link ApiKey} object to be saved.
     * @return The saved {@link ApiKey} object, potentially with updated metadata (e.g., autogenerated IDs).
     */
    ApiKey save(ApiKey apiKey);

    /**
     * Retrieves all API keys associated with a specific user.
     *
     * @param userId The ID of the user whose API keys are to be retrieved.
     * @return A list of {@link ApiKey} objects belonging to the specified user. If no keys are found, an empty list is returned.
     */
    List<ApiKey> findByUserId(String userId);

    /**
     * Retrieves a specific API key for a user by its key value and user ID.
     * This method ensures that the API key belongs to the specified user.
     *
     * @param apiKey The unique key value of the API key.
     * @param userId The ID of the user who owns the API key.
     * @return An {@link Optional} containing the {@link ApiKey} if found, or an empty {@link Optional} if not.
     */
    Optional<ApiKey> findByKeyAndUserId(String apiKey, String userId);
}

